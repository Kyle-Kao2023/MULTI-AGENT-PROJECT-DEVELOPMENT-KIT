使用 VibeCoder 打造交易系統的黃金工作流程
這套工作流程的核心思想是：您扮演「策略思想家」和「最終決策者」的角色，將所有繁瑣的工程實現、測試和報告工作，都交給您的 AI 團隊 VibeCoder。
Phase 1: 專案初始化 (只需一次)
從「交易策略」模板啟動:
打開您的終端機，執行我們專為交易系統設計的 init 指令：
作用: 這會自動生成一個 ProjectSpec.yaml，其中已經包含了您需要的交易模組目標（SNR/FVG, Regime 等）和最關鍵的回測驗收標準（勝率、MFE/MAE 等）。
設定您的金鑰:
打開 .env 檔案 (如果沒有，請從 .env.example 複製一份)。
填入您的 OPENAI_API_KEY 和 ANTHROPIC_API_KEY。
您的專案基礎設施現已準備就緒。
Phase 2: 核心開發迴圈 (為每一個新策略/功能重複此流程)
假設您今天的任務是：「實作一個基於 RSI 指標的趨勢過濾器，只在 RSI > 50 時允許做多」。
下達高階指令:
這是您身為「策略思想家」的核心工作。您只需用自然語言描述您的策略思想，然後執行 run 指令：
AI 團隊開始運作 (您只需等待):
規劃師 (Planner - GPT-5) 會將您的模糊想法，分解成一份清晰的技術規格文件 (plan)。
開發者 (Dev - Claude Sonnet 4) 會接手計畫，產出符合您要求的、結構化的 Python 程式碼 (code_diff)。
自我修正迴圈: 如果第一次產出的程式碼無法通過初步的回測（由我們的隨機回測腳本模擬），系統會自動帶著修正建議，讓 Dev 進行最多 3 次的自我修正。
觸發自動化工程師 (Cursor Agent):
當指令執行完畢後，artifacts/exec/task.json 已經生成。
您只需切換到 Cursor 的 Agents 面板，VibeCoder 的規則會自動觸發，提示您執行背景任務。
點擊「執行」，然後您就可以去泡杯咖啡了。
在背景中，VibeCoder 的自動化工程師正在為您執行一整套專業的 DevOps 流程：
建立一個獨立的 Git 分支。
將 AI 生成的結構化程式碼，精確地應用到對應的檔案中。
執行您定義的全套品質檢查 (ruff, pytest, mypy)。
執行 scripts/backtest.py，生成真實的回測報告和圖表數據。
最終，在您的 GitHub 上開啟一個包含初始內容的 Pull Request。
Phase 3: 審查與合併 (您的「最終決策」時刻)
前往 Pull Request 頁面:
CI/CD 流程會自動啟動。幾分鐘後，您會看到一個由 VibeCoder 精心準備的 PR。
閱讀標準化的報告:
CI 流程完成後，PR 的描述會被自動更新為我們設計的標準化模板。
您將在一個頁面中，清晰地看到：
## 📌 任務: 您最初的指令。
## 📋 規劃 (GPT-5): AI 規劃師的完整思路。
## 💻 變更 (Claude Sonnet 4): AI 開發者修改了哪些檔案。
## ✅ 測試/回測: 包含真實回測指標的摘要表格。
## 🔒 Gate: 這次變更所必須通過的驗收條件。
做出決策:
Gate 未通過 ❌: CI/CD 的檢查會顯示為紅色失敗，GitHub 會自動阻止您點擊「Merge」按鈕。您可以直接在 PR 中留言，提供更精確的修正方向，然後回到 Phase 2，將您的修正意見加入到下一次的 --task 中。
Gate 通過 ✅: 所有檢查都是綠色。您可以審閱程式碼，查看 artifacts 中由 CI 上傳的詳細圖表和覆蓋率報告。一切滿意後，自信地按下「Merge」按鈕。
Phase 4: 觀測與迭代
在進行了幾次開發迴圈後，您可以隨時執行：
這會生成一個 DASHBOARD.md，讓您從宏觀角度審視您的 AI 團隊的表現：
成本: 最近的開發總共花費了多少錢？
效率: Dev 節點的「便宜優先」策略觸發了多少次回退？
成功率: 您的 Gate 條件是否過於嚴格或寬鬆？